#include <vector>
#include <queue>

class Solution {
public:
    int maximumUnits(std::vector<std::vector<int>>& boxTypes, int truckSize) {
        // Custom comparison function for sorting in decreasing order of units
        auto cmp = [](const std::vector<int>& a, const std::vector<int>& b) {
            return a[1] < b[1];
        };

        std::priority_queue<std::vector<int>, std::vector<std::vector<int>>, decltype(cmp)> pq(cmp);
        int count = 0;
        int units = 0;

        for (const std::vector<int>& box : boxTypes) {
            pq.push(box);
        }

        while (!pq.empty() && count < truckSize) {
            int boxCount = pq.top()[0];
            int boxUnits = pq.top()[1];
            pq.pop();

            if (boxCount <= truckSize - count) {
                count += boxCount;
                units += boxCount * boxUnits;
            } else {
                units += (truckSize - count) * boxUnits;
                count = truckSize;
            }
        }

        return units;
    }
};





// class Solution {
// public:
//     int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
//         priority_queue<pair<int,int>>pq;
//         int count =0;
//         for(vector<int>x : boxTypes){
//             pq.push({x[1], x[0]});
//             int units = 0;
//             while(!pq.empty() && count < truckSize){
//                 if(count+pq.top().second< truckSize){
//                     count+=pq.top().second;
//                     units+=pq.top().second*pq.top().first;
//                     pq.pop();
//                 }else{
//                     int quantity = truckSize - count;
//                     count+=quantity;
//                     units+=quantity*pq.top().first;
//                     pq.pop();
                
            
//             }
//         }
//                     return units;

//         }
// };
